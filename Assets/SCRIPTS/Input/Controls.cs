//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/SCRIPTS/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""a_Camera"",
            ""id"": ""35c91454-65e7-435b-ae15-2574e180a51f"",
            ""actions"": [
                {
                    ""name"": ""CameraMovement"",
                    ""type"": ""Value"",
                    ""id"": ""7867252a-a367-4186-954e-1976033aa881"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraRotation"",
                    ""type"": ""Button"",
                    ""id"": ""24a9b414-9ae4-4818-a0a0-a570d190362f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraZoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5b79f834-5715-4a91-ad36-377e395c8300"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryTouch"",
                    ""type"": ""Value"",
                    ""id"": ""8633da72-7c4b-4e55-bd04-f38b3b94b32e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouch"",
                    ""type"": ""Value"",
                    ""id"": ""8276be31-d317-4ad3-84ae-357452f36b93"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""6b73ab07-17a3-4730-846a-e28d77382730"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""a89aa249-e74e-47de-94fd-ba894361f71a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""7c797637-0158-4207-9c6e-95d9cbc26761"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1cf72dc4-71cf-44f0-9e2a-b75cc40a719e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b4a4279e-c23b-4490-91bc-f131ec6cc558"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""29d734a0-b4e8-45ef-aa99-8ef6eab1f03d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""69e6b908-5e8e-4246-87b9-201042ff2eb1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""5f05e5ed-83c0-46fd-aa7b-3ff67e9988d3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""21e2c20a-4c03-4ec3-88f0-5a43a32f539c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e08b16d5-4c8c-44fd-8448-4dbbf1f6ba25"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3db73968-ac55-4fa3-b076-b10e61d59dcb"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a37b0e54-a971-4eee-bcaf-b930c3e48c55"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""id"": ""025dd9cc-ecfd-4de4-bfa0-f18366776939"",
                    ""path"": ""1DAxis(whichSideWins=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraRotation"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""7985d290-e99a-4578-963b-51baf59aa735"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CameraRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d8e3dd39-3ca6-46d6-a0de-3e5566226999"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""CameraRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5d1ca196-c585-48d7-aa5a-661d49dcfd58"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""CameraZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea4831a1-23ab-4a8b-acd4-13e72bbe564c"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""PrimaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""39b58710-bce7-4a1a-be6a-a339605f366f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""PrimaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f65a1e75-c93d-402d-a6fb-cc2ab1d53fb1"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""SecondaryTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14cbc622-2891-42ea-bfed-6b955c199f9f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""PrimaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86e0b34b-4277-43e4-8d4b-5ab17bbd4af6"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""PrimaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43ad7243-4f94-4c98-ae36-55c2591fce0b"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""SecondaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""a_Dialogue"",
            ""id"": ""b532230f-0a76-4456-8a0f-e5bd32d5e8d4"",
            ""actions"": [
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""df3fcdcb-98e3-48b1-986d-e25ec2857d79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3bf50de-bfd2-49f8-9fac-a4bb639e0fca"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse"",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca02adcd-6a81-4679-9088-c09647b9ac19"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touchscreen"",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""a_Shortcuts"",
            ""id"": ""ebd21048-48e1-4d3d-9151-099cdf47d13d"",
            ""actions"": [
                {
                    ""name"": ""EscapeKey"",
                    ""type"": ""Button"",
                    ""id"": ""8bf9d4e2-fd1b-4dac-a9ed-1b6ba6843c29"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DebugConsole"",
                    ""type"": ""Button"",
                    ""id"": ""d6282583-d40f-459e-8723-90dfb5c163ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2c7c9be3-5ba7-422c-804e-ed72b6ad978f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""EscapeKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d958f97-d56c-445e-9491-68cfa5fc3825"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DebugConsole"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touchscreen"",
            ""bindingGroup"": ""Touchscreen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // a_Camera
        m_a_Camera = asset.FindActionMap("a_Camera", throwIfNotFound: true);
        m_a_Camera_CameraMovement = m_a_Camera.FindAction("CameraMovement", throwIfNotFound: true);
        m_a_Camera_CameraRotation = m_a_Camera.FindAction("CameraRotation", throwIfNotFound: true);
        m_a_Camera_CameraZoom = m_a_Camera.FindAction("CameraZoom", throwIfNotFound: true);
        m_a_Camera_PrimaryTouch = m_a_Camera.FindAction("PrimaryTouch", throwIfNotFound: true);
        m_a_Camera_SecondaryTouch = m_a_Camera.FindAction("SecondaryTouch", throwIfNotFound: true);
        m_a_Camera_PrimaryTouchContact = m_a_Camera.FindAction("PrimaryTouchContact", throwIfNotFound: true);
        m_a_Camera_SecondaryTouchContact = m_a_Camera.FindAction("SecondaryTouchContact", throwIfNotFound: true);
        // a_Dialogue
        m_a_Dialogue = asset.FindActionMap("a_Dialogue", throwIfNotFound: true);
        m_a_Dialogue_Continue = m_a_Dialogue.FindAction("Continue", throwIfNotFound: true);
        // a_Shortcuts
        m_a_Shortcuts = asset.FindActionMap("a_Shortcuts", throwIfNotFound: true);
        m_a_Shortcuts_EscapeKey = m_a_Shortcuts.FindAction("EscapeKey", throwIfNotFound: true);
        m_a_Shortcuts_DebugConsole = m_a_Shortcuts.FindAction("DebugConsole", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // a_Camera
    private readonly InputActionMap m_a_Camera;
    private List<IA_CameraActions> m_A_CameraActionsCallbackInterfaces = new List<IA_CameraActions>();
    private readonly InputAction m_a_Camera_CameraMovement;
    private readonly InputAction m_a_Camera_CameraRotation;
    private readonly InputAction m_a_Camera_CameraZoom;
    private readonly InputAction m_a_Camera_PrimaryTouch;
    private readonly InputAction m_a_Camera_SecondaryTouch;
    private readonly InputAction m_a_Camera_PrimaryTouchContact;
    private readonly InputAction m_a_Camera_SecondaryTouchContact;
    public struct A_CameraActions
    {
        private @Controls m_Wrapper;
        public A_CameraActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraMovement => m_Wrapper.m_a_Camera_CameraMovement;
        public InputAction @CameraRotation => m_Wrapper.m_a_Camera_CameraRotation;
        public InputAction @CameraZoom => m_Wrapper.m_a_Camera_CameraZoom;
        public InputAction @PrimaryTouch => m_Wrapper.m_a_Camera_PrimaryTouch;
        public InputAction @SecondaryTouch => m_Wrapper.m_a_Camera_SecondaryTouch;
        public InputAction @PrimaryTouchContact => m_Wrapper.m_a_Camera_PrimaryTouchContact;
        public InputAction @SecondaryTouchContact => m_Wrapper.m_a_Camera_SecondaryTouchContact;
        public InputActionMap Get() { return m_Wrapper.m_a_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(A_CameraActions set) { return set.Get(); }
        public void AddCallbacks(IA_CameraActions instance)
        {
            if (instance == null || m_Wrapper.m_A_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_A_CameraActionsCallbackInterfaces.Add(instance);
            @CameraMovement.started += instance.OnCameraMovement;
            @CameraMovement.performed += instance.OnCameraMovement;
            @CameraMovement.canceled += instance.OnCameraMovement;
            @CameraRotation.started += instance.OnCameraRotation;
            @CameraRotation.performed += instance.OnCameraRotation;
            @CameraRotation.canceled += instance.OnCameraRotation;
            @CameraZoom.started += instance.OnCameraZoom;
            @CameraZoom.performed += instance.OnCameraZoom;
            @CameraZoom.canceled += instance.OnCameraZoom;
            @PrimaryTouch.started += instance.OnPrimaryTouch;
            @PrimaryTouch.performed += instance.OnPrimaryTouch;
            @PrimaryTouch.canceled += instance.OnPrimaryTouch;
            @SecondaryTouch.started += instance.OnSecondaryTouch;
            @SecondaryTouch.performed += instance.OnSecondaryTouch;
            @SecondaryTouch.canceled += instance.OnSecondaryTouch;
            @PrimaryTouchContact.started += instance.OnPrimaryTouchContact;
            @PrimaryTouchContact.performed += instance.OnPrimaryTouchContact;
            @PrimaryTouchContact.canceled += instance.OnPrimaryTouchContact;
            @SecondaryTouchContact.started += instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.performed += instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.canceled += instance.OnSecondaryTouchContact;
        }

        private void UnregisterCallbacks(IA_CameraActions instance)
        {
            @CameraMovement.started -= instance.OnCameraMovement;
            @CameraMovement.performed -= instance.OnCameraMovement;
            @CameraMovement.canceled -= instance.OnCameraMovement;
            @CameraRotation.started -= instance.OnCameraRotation;
            @CameraRotation.performed -= instance.OnCameraRotation;
            @CameraRotation.canceled -= instance.OnCameraRotation;
            @CameraZoom.started -= instance.OnCameraZoom;
            @CameraZoom.performed -= instance.OnCameraZoom;
            @CameraZoom.canceled -= instance.OnCameraZoom;
            @PrimaryTouch.started -= instance.OnPrimaryTouch;
            @PrimaryTouch.performed -= instance.OnPrimaryTouch;
            @PrimaryTouch.canceled -= instance.OnPrimaryTouch;
            @SecondaryTouch.started -= instance.OnSecondaryTouch;
            @SecondaryTouch.performed -= instance.OnSecondaryTouch;
            @SecondaryTouch.canceled -= instance.OnSecondaryTouch;
            @PrimaryTouchContact.started -= instance.OnPrimaryTouchContact;
            @PrimaryTouchContact.performed -= instance.OnPrimaryTouchContact;
            @PrimaryTouchContact.canceled -= instance.OnPrimaryTouchContact;
            @SecondaryTouchContact.started -= instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.performed -= instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.canceled -= instance.OnSecondaryTouchContact;
        }

        public void RemoveCallbacks(IA_CameraActions instance)
        {
            if (m_Wrapper.m_A_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IA_CameraActions instance)
        {
            foreach (var item in m_Wrapper.m_A_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_A_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public A_CameraActions @a_Camera => new A_CameraActions(this);

    // a_Dialogue
    private readonly InputActionMap m_a_Dialogue;
    private List<IA_DialogueActions> m_A_DialogueActionsCallbackInterfaces = new List<IA_DialogueActions>();
    private readonly InputAction m_a_Dialogue_Continue;
    public struct A_DialogueActions
    {
        private @Controls m_Wrapper;
        public A_DialogueActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Continue => m_Wrapper.m_a_Dialogue_Continue;
        public InputActionMap Get() { return m_Wrapper.m_a_Dialogue; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(A_DialogueActions set) { return set.Get(); }
        public void AddCallbacks(IA_DialogueActions instance)
        {
            if (instance == null || m_Wrapper.m_A_DialogueActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_A_DialogueActionsCallbackInterfaces.Add(instance);
            @Continue.started += instance.OnContinue;
            @Continue.performed += instance.OnContinue;
            @Continue.canceled += instance.OnContinue;
        }

        private void UnregisterCallbacks(IA_DialogueActions instance)
        {
            @Continue.started -= instance.OnContinue;
            @Continue.performed -= instance.OnContinue;
            @Continue.canceled -= instance.OnContinue;
        }

        public void RemoveCallbacks(IA_DialogueActions instance)
        {
            if (m_Wrapper.m_A_DialogueActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IA_DialogueActions instance)
        {
            foreach (var item in m_Wrapper.m_A_DialogueActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_A_DialogueActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public A_DialogueActions @a_Dialogue => new A_DialogueActions(this);

    // a_Shortcuts
    private readonly InputActionMap m_a_Shortcuts;
    private List<IA_ShortcutsActions> m_A_ShortcutsActionsCallbackInterfaces = new List<IA_ShortcutsActions>();
    private readonly InputAction m_a_Shortcuts_EscapeKey;
    private readonly InputAction m_a_Shortcuts_DebugConsole;
    public struct A_ShortcutsActions
    {
        private @Controls m_Wrapper;
        public A_ShortcutsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @EscapeKey => m_Wrapper.m_a_Shortcuts_EscapeKey;
        public InputAction @DebugConsole => m_Wrapper.m_a_Shortcuts_DebugConsole;
        public InputActionMap Get() { return m_Wrapper.m_a_Shortcuts; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(A_ShortcutsActions set) { return set.Get(); }
        public void AddCallbacks(IA_ShortcutsActions instance)
        {
            if (instance == null || m_Wrapper.m_A_ShortcutsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_A_ShortcutsActionsCallbackInterfaces.Add(instance);
            @EscapeKey.started += instance.OnEscapeKey;
            @EscapeKey.performed += instance.OnEscapeKey;
            @EscapeKey.canceled += instance.OnEscapeKey;
            @DebugConsole.started += instance.OnDebugConsole;
            @DebugConsole.performed += instance.OnDebugConsole;
            @DebugConsole.canceled += instance.OnDebugConsole;
        }

        private void UnregisterCallbacks(IA_ShortcutsActions instance)
        {
            @EscapeKey.started -= instance.OnEscapeKey;
            @EscapeKey.performed -= instance.OnEscapeKey;
            @EscapeKey.canceled -= instance.OnEscapeKey;
            @DebugConsole.started -= instance.OnDebugConsole;
            @DebugConsole.performed -= instance.OnDebugConsole;
            @DebugConsole.canceled -= instance.OnDebugConsole;
        }

        public void RemoveCallbacks(IA_ShortcutsActions instance)
        {
            if (m_Wrapper.m_A_ShortcutsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IA_ShortcutsActions instance)
        {
            foreach (var item in m_Wrapper.m_A_ShortcutsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_A_ShortcutsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public A_ShortcutsActions @a_Shortcuts => new A_ShortcutsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    private int m_TouchscreenSchemeIndex = -1;
    public InputControlScheme TouchscreenScheme
    {
        get
        {
            if (m_TouchscreenSchemeIndex == -1) m_TouchscreenSchemeIndex = asset.FindControlSchemeIndex("Touchscreen");
            return asset.controlSchemes[m_TouchscreenSchemeIndex];
        }
    }
    public interface IA_CameraActions
    {
        void OnCameraMovement(InputAction.CallbackContext context);
        void OnCameraRotation(InputAction.CallbackContext context);
        void OnCameraZoom(InputAction.CallbackContext context);
        void OnPrimaryTouch(InputAction.CallbackContext context);
        void OnSecondaryTouch(InputAction.CallbackContext context);
        void OnPrimaryTouchContact(InputAction.CallbackContext context);
        void OnSecondaryTouchContact(InputAction.CallbackContext context);
    }
    public interface IA_DialogueActions
    {
        void OnContinue(InputAction.CallbackContext context);
    }
    public interface IA_ShortcutsActions
    {
        void OnEscapeKey(InputAction.CallbackContext context);
        void OnDebugConsole(InputAction.CallbackContext context);
    }
}
